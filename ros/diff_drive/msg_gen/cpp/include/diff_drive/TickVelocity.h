/* Auto-generated by genmsg_cpp for file /home/tobor/data-beagleboard/bb_navigation/diff_drive/msg/TickVelocity.msg */
#ifndef DIFF_DRIVE_MESSAGE_TICKVELOCITY_H
#define DIFF_DRIVE_MESSAGE_TICKVELOCITY_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace diff_drive
{
template <class ContainerAllocator>
struct TickVelocity_ {
  typedef TickVelocity_<ContainerAllocator> Type;

  TickVelocity_()
  : linear_ticks_sec(0)
  , angular_ticks_sec(0)
  {
  }

  TickVelocity_(const ContainerAllocator& _alloc)
  : linear_ticks_sec(0)
  , angular_ticks_sec(0)
  {
  }

  typedef int16_t _linear_ticks_sec_type;
  int16_t linear_ticks_sec;

  typedef int16_t _angular_ticks_sec_type;
  int16_t angular_ticks_sec;


private:
  static const char* __s_getDataType_() { return "diff_drive/TickVelocity"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "c303165597398c26cce74324035e7fc0"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "int16   linear_ticks_sec\n\
int16   angular_ticks_sec\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, linear_ticks_sec);
    ros::serialization::serialize(stream, angular_ticks_sec);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, linear_ticks_sec);
    ros::serialization::deserialize(stream, angular_ticks_sec);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(linear_ticks_sec);
    size += ros::serialization::serializationLength(angular_ticks_sec);
    return size;
  }

  typedef boost::shared_ptr< ::diff_drive::TickVelocity_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::diff_drive::TickVelocity_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct TickVelocity
typedef  ::diff_drive::TickVelocity_<std::allocator<void> > TickVelocity;

typedef boost::shared_ptr< ::diff_drive::TickVelocity> TickVelocityPtr;
typedef boost::shared_ptr< ::diff_drive::TickVelocity const> TickVelocityConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::diff_drive::TickVelocity_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::diff_drive::TickVelocity_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace diff_drive

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::diff_drive::TickVelocity_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::diff_drive::TickVelocity_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::diff_drive::TickVelocity_<ContainerAllocator> > {
  static const char* value() 
  {
    return "c303165597398c26cce74324035e7fc0";
  }

  static const char* value(const  ::diff_drive::TickVelocity_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xc303165597398c26ULL;
  static const uint64_t static_value2 = 0xcce74324035e7fc0ULL;
};

template<class ContainerAllocator>
struct DataType< ::diff_drive::TickVelocity_<ContainerAllocator> > {
  static const char* value() 
  {
    return "diff_drive/TickVelocity";
  }

  static const char* value(const  ::diff_drive::TickVelocity_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::diff_drive::TickVelocity_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int16   linear_ticks_sec\n\
int16   angular_ticks_sec\n\
\n\
";
  }

  static const char* value(const  ::diff_drive::TickVelocity_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::diff_drive::TickVelocity_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::diff_drive::TickVelocity_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.linear_ticks_sec);
    stream.next(m.angular_ticks_sec);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct TickVelocity_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::diff_drive::TickVelocity_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::diff_drive::TickVelocity_<ContainerAllocator> & v) 
  {
    s << indent << "linear_ticks_sec: ";
    Printer<int16_t>::stream(s, indent + "  ", v.linear_ticks_sec);
    s << indent << "angular_ticks_sec: ";
    Printer<int16_t>::stream(s, indent + "  ", v.angular_ticks_sec);
  }
};


} // namespace message_operations
} // namespace ros

#endif // DIFF_DRIVE_MESSAGE_TICKVELOCITY_H

