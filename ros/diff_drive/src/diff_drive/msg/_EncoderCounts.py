"""autogenerated by genmsg_py from EncoderCounts.msg. Do not edit."""
import roslib.message
import struct

import roslib.rostime

class EncoderCounts(roslib.message.Message):
  _md5sum = "ac248d5b02def18e8264fc359c1f407c"
  _type = "diff_drive/EncoderCounts"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int16   left_count
int16   right_count
int16   stasis_count
int16   dt_ms
time    reading_time

"""
  __slots__ = ['left_count','right_count','stasis_count','dt_ms','reading_time']
  _slot_types = ['int16','int16','int16','int16','time']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       left_count,right_count,stasis_count,dt_ms,reading_time
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(EncoderCounts, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.left_count is None:
        self.left_count = 0
      if self.right_count is None:
        self.right_count = 0
      if self.stasis_count is None:
        self.stasis_count = 0
      if self.dt_ms is None:
        self.dt_ms = 0
      if self.reading_time is None:
        self.reading_time = roslib.rostime.Time()
    else:
      self.left_count = 0
      self.right_count = 0
      self.stasis_count = 0
      self.dt_ms = 0
      self.reading_time = roslib.rostime.Time()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self
      buff.write(_struct_4h2I.pack(_x.left_count, _x.right_count, _x.stasis_count, _x.dt_ms, _x.reading_time.secs, _x.reading_time.nsecs))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      if self.reading_time is None:
        self.reading_time = roslib.rostime.Time()
      end = 0
      _x = self
      start = end
      end += 16
      (_x.left_count, _x.right_count, _x.stasis_count, _x.dt_ms, _x.reading_time.secs, _x.reading_time.nsecs,) = _struct_4h2I.unpack(str[start:end])
      self.reading_time.canon()
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self
      buff.write(_struct_4h2I.pack(_x.left_count, _x.right_count, _x.stasis_count, _x.dt_ms, _x.reading_time.secs, _x.reading_time.nsecs))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      if self.reading_time is None:
        self.reading_time = roslib.rostime.Time()
      end = 0
      _x = self
      start = end
      end += 16
      (_x.left_count, _x.right_count, _x.stasis_count, _x.dt_ms, _x.reading_time.secs, _x.reading_time.nsecs,) = _struct_4h2I.unpack(str[start:end])
      self.reading_time.canon()
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_4h2I = struct.Struct("<4h2I")
