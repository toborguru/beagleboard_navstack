#! /usr/bin/env python
# Forearm camera configuration

PACKAGE='simple_base_movement'

import math

from dynamic_reconfigure.parameter_generator_catkin import *

reload_level = 0

gen = ParameterGenerator()
#       Name                    Type      Reconfiguration level
#                               Description      
#                               Default    Min   Max
#  Robot Parameters
# robot_params = gen.add_group("RobotParameters")
# robot_params.add("max_vel_x",         double_t, reload_level,    
gen.add("max_vel_x",         double_t, reload_level,    
                             "The maximum forward velocity allowed for the base in meters/sec.",
                             0.25, 0.0, 10.0)

gen.add("min_vel_x",         double_t, reload_level,    
                             "The minimum forward velocity allowed for the base in meters/sec. It is useful to specify this to guarantee that velocity commands sent to a mobile base are high enough to allow the base to overcome friction.",
                             0.0, 0.0, 1.0)

gen.add("acc_lim_x",         double_t, reload_level,    
                             "The x acceleration limit of the robot in meters/sec^2.",
                             0.1, 0.0, 2.0)

gen.add("acc_lim_rotation",  double_t, reload_level,    
                             "The rotational acceleration limit of the robot in radians/sec^2.",
                             0.1, 0.0, 2.0)

gen.add("max_rotational_vel",    double_t, reload_level,    
                                 "The maximum rotational velocity allowed for the base in radians/sec.",
                                 10.0, 0.0, 100.0)

gen.add("min_rotational_vel",   double_t, reload_level,    
                                "The minimum rotational velocity allowed for the base while performing in-place rotations in radians/sec.",
                                0.0, 0.0, 10.0)

# Controller Parameters
# controller_params = gen.add_group("ControllerParameters")
# controller_params.add("robot_base_frame",  str_t, reload_level,    
gen.add("robot_base_frame",  str_t, reload_level,    
                             "The mobile frame.",
                             "odom")

gen.add("global_frame_id",   str_t, reload_level,    
                             "The global, static frame.",
                             "base_link")

gen.add("controller_frequency",  double_t, reload_level,    
                                 "The frequency at which this controller will be called in Hz. Uses searchParam to read the parameter from parent namespaces if not set in the namespace of the controller.",
                                 10.0, 0.5, 100.0)

gen.add("normalize_angle",   bool_t, reload_level,    
                             "If set rotation will be constrained to within +-pi. This will result in a short CCW turn if a large (>180 deg) CW turn is requested.",
                             True)

gen.add("post_move_delay",   double_t, reload_level,    
                             "Delay in seconds after a move completes before it is considered done, allows robots to fully stop.",
                             0.20, 0.0, 1.0)

# Goal Tolerances
gen.add("yaw_goal_tolerance",   double_t, reload_level,    
                                "The tolerance in radians for the controller in yaw/rotation when achieving its goal.",
                                0.005, 0.0, 1.0) # 5 degrees = 0.0175 radians

gen.add("xy_goal_tolerance",    double_t, reload_level,    
                                "The tolerance in meters for the controller in the x & y distance when achieving a goal.",
                                0.001, 0.0, 1.0)

gen.add("latch_xy_goal_tolerance",   bool_t, reload_level,    
                                     "If goal tolerance is latched, if the robot ever reaches the goal xy location it will simply rotate in place, even if it ends up outside the goal tolerance while it is doing so.",
                                     True)

# Precision Positioning
gen.add("precision_distance",    double_t, reload_level,    
                                 "If greater than zero, when the robot is this distance from the goal the max speed will be changed to precision_vel_x.",
                                 0.0, 0.0, 1.0)

gen.add("precision_angle",   double_t, reload_level,    
                             "If greater than zero, when the robot is this angle from the goal the max rotational speed will be changed to precision_rotational_vel.",
                             0.0, 0.0, math.pi)

gen.add("precision_vel_x",   double_t, reload_level,    
                             "Max linear speed when close to the goal.",
                             0.05, 0.0, 1.0)

gen.add("precision_rotational_vel",  double_t, reload_level,    
                                     "Max angular speed when close to the goal.",
                                     0.20, 0.0, 10.0)

# exit(gen.generate(PACKAGE, "simple_base_movement", "DistanceController"))
exit(gen.generate(PACKAGE, "DistanceController", "DistanceController"))

