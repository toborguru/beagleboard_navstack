"""autogenerated by genmsg_py from Bumpers.msg. Do not edit."""
import roslib.message
import struct


class Bumpers(roslib.message.Message):
  _md5sum = "267e946ac113512e3d24a087ce648b9c"
  _type = "data_robot/Bumpers"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint8 NONE = 0
uint8 FRONT = 1
uint8 FRONT_LEFT = 2
uint8 LEFT = 3
uint8 REAR_LEFT = 4
uint8 REAR = 5
uint8 REAR_RIGHT = 6
uint8 RIGHT = 7
uint8 FRONT_RIGHT = 8

uint8 bump_direction

"""
  # Pseudo-constants
  NONE = 0
  FRONT = 1
  FRONT_LEFT = 2
  LEFT = 3
  REAR_LEFT = 4
  REAR = 5
  REAR_RIGHT = 6
  RIGHT = 7
  FRONT_RIGHT = 8

  __slots__ = ['bump_direction']
  _slot_types = ['uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       bump_direction
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(Bumpers, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.bump_direction is None:
        self.bump_direction = 0
    else:
      self.bump_direction = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      buff.write(_struct_B.pack(self.bump_direction))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      end = 0
      start = end
      end += 1
      (self.bump_direction,) = _struct_B.unpack(str[start:end])
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      buff.write(_struct_B.pack(self.bump_direction))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      end = 0
      start = end
      end += 1
      (self.bump_direction,) = _struct_B.unpack(str[start:end])
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_B = struct.Struct("<B")
