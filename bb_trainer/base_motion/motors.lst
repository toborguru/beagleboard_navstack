   1               		.file	"motors.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__CCP__  = 0x34
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
  10               		.text
  11               	.Ltext0:
  74               	.global	Motors_Enable
  76               	Motors_Enable:
  77               		.stabd	46,0,0
   1:base_motion/motors.c **** /* leds.c provides an API for controlling the leds on DATA.
   2:base_motion/motors.c **** */
   3:base_motion/motors.c **** 
   4:base_motion/motors.c **** #include <avr/io.h>
   5:base_motion/motors.c **** 
   6:base_motion/motors.c **** #include "../macros.h"
   7:base_motion/motors.c **** #include "../Avr.h"
   8:base_motion/motors.c **** 
   9:base_motion/motors.c **** #include "motors.h"
  10:base_motion/motors.c **** 
  11:base_motion/motors.c **** /*-----------------------------------------------------------
  12:base_motion/motors.c ****  * DATA Base movement motor control routines
  13:base_motion/motors.c ****  *-----------------------------------------------------------*/
  14:base_motion/motors.c **** 
  15:base_motion/motors.c **** // Base motor pin assignments 
  16:base_motion/motors.c **** // Toshiba TB6612FNG Motor Driver Chip
  17:base_motion/motors.c **** // NOTE: Channels A + B on the driver chip may have their definitions reversed
  18:base_motion/motors.c **** // here in order to match the Timer1 compare match definitions for clarity.
  19:base_motion/motors.c **** #define MOTORS_A_PWM_PIN    1       
  20:base_motion/motors.c **** #define MOTORS_A_PWM_PORT   B
  21:base_motion/motors.c **** #define MOTORS_A_POWER      OCR1A
  22:base_motion/motors.c **** 
  23:base_motion/motors.c **** #define MOTORS_B_PWM_PIN    2
  24:base_motion/motors.c **** #define MOTORS_B_PWM_PORT   B
  25:base_motion/motors.c **** #define MOTORS_B_POWER      OCR1B
  26:base_motion/motors.c **** 
  27:base_motion/motors.c **** #define MOTORS_A_IN1_PIN    0
  28:base_motion/motors.c **** #define MOTORS_A_IN1_PORT   B
  29:base_motion/motors.c **** 
  30:base_motion/motors.c **** #define MOTORS_A_IN2_PIN    3
  31:base_motion/motors.c **** #define MOTORS_A_IN2_PORT   B
  32:base_motion/motors.c **** 
  33:base_motion/motors.c **** #define MOTORS_B_IN1_PIN    4
  34:base_motion/motors.c **** #define MOTORS_B_IN1_PORT   B
  35:base_motion/motors.c **** 
  36:base_motion/motors.c **** #define MOTORS_B_IN2_PIN    5
  37:base_motion/motors.c **** #define MOTORS_B_IN2_PORT   B
  38:base_motion/motors.c **** 
  39:base_motion/motors.c **** #define MOTORS_STANDBY_PIN  0
  40:base_motion/motors.c **** #define MOTORS_STANDBY_PORT C
  41:base_motion/motors.c **** 
  42:base_motion/motors.c **** // MOT - raw direction control
  43:base_motion/motors.c **** #define MOTORS_A_ON()       BIT_SET(_PORT(MOTORS_A_PWM_PORT), MOTORS_A_PWM_PIN);
  44:base_motion/motors.c **** #define MOTORS_A_OFF()      BIT_CLEAR(_PORT(MOTORS_A_PWM_PORT), MOTORS_A_PWM_PIN);
  45:base_motion/motors.c **** #define MOTORS_A_CW()       BIT_CLEAR(_PORT(MOTORS_A_IN2_PORT), MOTORS_A_IN2_PIN);  \
  46:base_motion/motors.c ****                             BIT_SET(_PORT(MOTORS_A_IN1_PORT), MOTORS_A_IN1_PIN); // clear first for
  47:base_motion/motors.c **** #define MOTORS_A_CCW()      BIT_CLEAR(_PORT(MOTORS_A_IN1_PORT), MOTORS_A_IN1_PIN);  \
  48:base_motion/motors.c ****                             BIT_SET(_PORT(MOTORS_A_IN2_PORT), MOTORS_A_IN2_PIN); // clear first for
  49:base_motion/motors.c **** #define MOTORS_A_BRAKE()    BIT_SET(_PORT(MOTORS_A_IN1_PORT), MOTORS_A_IN1_PIN);    \
  50:base_motion/motors.c ****                             BIT_SET(_PORT(MOTORS_A_IN2_PORT), MOTORS_A_IN2_PIN);
  51:base_motion/motors.c **** #define MOTORS_A_COAST()    BIT_CLEAR(_PORT(MOTORS_A_IN1_PORT), MOTORS_A_IN1_PIN);  \
  52:base_motion/motors.c ****                             BIT_CLEAR(_PORT(MOTORS_A_IN2_PORT), MOTORS_A_IN2_PIN);
  53:base_motion/motors.c **** 
  54:base_motion/motors.c **** #define MOTORS_B_ON()       BIT_SET(_PORT(MOTORS_B_PWM_PORT), MOTORS_B_PWM_PIN);
  55:base_motion/motors.c **** #define MOTORS_B_OFF()      BIT_CLEAR(_PORT(MOTORS_B_PWM_PORT), MOTORS_B_PWM_PIN);
  56:base_motion/motors.c **** #define MOTORS_B_CCW()      BIT_CLEAR(_PORT(MOTORS_B_IN2_PORT), MOTORS_B_IN2_PIN);  \
  57:base_motion/motors.c ****                             BIT_SET(_PORT(MOTORS_B_IN1_PORT), MOTORS_B_IN1_PIN); // clear first for
  58:base_motion/motors.c **** #define MOTORS_B_CW()       BIT_CLEAR(_PORT(MOTORS_B_IN1_PORT), MOTORS_B_IN1_PIN);  \
  59:base_motion/motors.c ****                             BIT_SET(_PORT(MOTORS_B_IN2_PORT), MOTORS_B_IN2_PIN); // clear first for
  60:base_motion/motors.c **** #define MOTORS_B_BRAKE()    BIT_SET(_PORT(MOTORS_B_IN1_PORT), MOTORS_B_IN1_PIN);    \
  61:base_motion/motors.c ****                             BIT_SET(_PORT(MOTORS_B_IN2_PORT), MOTORS_B_IN2_PIN);
  62:base_motion/motors.c **** #define MOTORS_B_COAST()    BIT_CLEAR(_PORT(MOTORS_B_IN1_PORT), MOTORS_B_IN1_PIN);  \
  63:base_motion/motors.c ****                             BIT_CLEAR(_PORT(MOTORS_B_IN2_PORT), MOTORS_B_IN2_PIN);
  64:base_motion/motors.c **** 
  65:base_motion/motors.c **** // Base motor interface
  66:base_motion/motors.c **** #define MOTORS_ESTOP()       MOTORS_A_BRAKE(); MOTORS_B_BRAKE();
  67:base_motion/motors.c **** 
  68:base_motion/motors.c **** #define MOTORS_ENABLE()      BIT_SET(_PORT(MOTORS_STANDBY_PORT), MOTORS_STANDBY_PIN);
  69:base_motion/motors.c **** #define MOTORS_DISABLE()     BIT_CLEAR(_PORT(MOTORS_STANDBY_PORT), MOTORS_STANDBY_PIN);
  70:base_motion/motors.c **** 
  71:base_motion/motors.c **** // Helpful substitutions for Left and Right MOTORS_
  72:base_motion/motors.c **** #define MOTORS_L_FORWARD()  MOTORS_B_CCW()
  73:base_motion/motors.c **** #define MOTORS_L_REVERSE()  MOTORS_B_CW()
  74:base_motion/motors.c **** #define MOTORS_L_BRAKE()    MOTORS_B_BRAKE()
  75:base_motion/motors.c **** #define MOTORS_L_COAST()    MOTORS_B_COAST() 
  76:base_motion/motors.c **** 
  77:base_motion/motors.c **** #define MOTORS_L_ON()       MOTORS_B_ON()
  78:base_motion/motors.c **** #define MOTORS_L_OFF()      MOTORS_B_OFF()
  79:base_motion/motors.c **** 
  80:base_motion/motors.c **** #define MOTORS_R_FORWARD()  MOTORS_A_CW()
  81:base_motion/motors.c **** #define MOTORS_R_REVERSE()  MOTORS_A_CCW()
  82:base_motion/motors.c **** #define MOTORS_R_BRAKE()    MOTORS_A_BRAKE()
  83:base_motion/motors.c **** #define MOTORS_R_COAST()    MOTORS_A_COAST() 
  84:base_motion/motors.c **** 
  85:base_motion/motors.c **** #define MOTORS_R_ON()       MOTORS_A_ON()
  86:base_motion/motors.c **** #define MOTORS_R_OFF()      MOTORS_A_OFF()
  87:base_motion/motors.c **** 
  88:base_motion/motors.c **** #define MOTORS_L_POWER  MOTORS_B_POWER
  89:base_motion/motors.c **** #define MOTORS_R_POWER  MOTORS_A_POWER
  90:base_motion/motors.c **** 
  91:base_motion/motors.c **** /*-----------------------------------------------------------
  92:base_motion/motors.c ****  * ISR Timer 1 Overflow
  93:base_motion/motors.c ****  *-----------------------------------------------------------*/
  94:base_motion/motors.c **** 
  95:base_motion/motors.c **** void Motors_Init( void )
  96:base_motion/motors.c **** {
  97:base_motion/motors.c ****     OUTPUT_PIN(MOTORS_STANDBY_PORT, MOTORS_STANDBY_PIN);
  98:base_motion/motors.c ****     OUTPUT_PIN(MOTORS_A_IN1_PORT, MOTORS_A_IN1_PIN);
  99:base_motion/motors.c ****     OUTPUT_PIN(MOTORS_A_IN2_PORT, MOTORS_A_IN2_PIN);
 100:base_motion/motors.c ****     OUTPUT_PIN(MOTORS_B_IN1_PORT, MOTORS_B_IN1_PIN);
 101:base_motion/motors.c ****     OUTPUT_PIN(MOTORS_B_IN2_PORT, MOTORS_B_IN2_PIN);
 102:base_motion/motors.c **** 
 103:base_motion/motors.c ****     OUTPUT_PIN(MOTORS_A_PWM_PORT, MOTORS_A_PWM_PIN);
 104:base_motion/motors.c ****     OUTPUT_PIN(MOTORS_B_PWM_PORT, MOTORS_B_PWM_PIN);
 105:base_motion/motors.c **** 
 106:base_motion/motors.c ****     // Setup Timer: Timer 1, /1 Prescale, 8-bit phase correct PWM
 107:base_motion/motors.c ****     TCCR1A = BIT(COM1A1) |
 108:base_motion/motors.c ****              BIT(COM1B1) |
 109:base_motion/motors.c ****              BIT(WGM10);
 110:base_motion/motors.c ****               
 111:base_motion/motors.c ****     TCCR1B = BIT(CS10);
 112:base_motion/motors.c **** 
 113:base_motion/motors.c ****     OCR1A = 0;
 114:base_motion/motors.c ****     OCR1B = 0;
 115:base_motion/motors.c **** 
 116:base_motion/motors.c ****     BIT_CLEAR( PRR, PRTIM1 );
 117:base_motion/motors.c **** 
 118:base_motion/motors.c ****     // TODO remove
 119:base_motion/motors.c ****     MOTORS_ENABLE();
 120:base_motion/motors.c **** 
 121:base_motion/motors.c ****     Motors_Set_Direction(MOTORS_L_INDEX, MOTORS_BRAKE);
 122:base_motion/motors.c ****     Motors_Set_Direction(MOTORS_R_INDEX, MOTORS_BRAKE);
 123:base_motion/motors.c **** 
 124:base_motion/motors.c ****     return ;
 125:base_motion/motors.c **** }
 126:base_motion/motors.c **** 
 127:base_motion/motors.c **** void Motors_Enable()
 128:base_motion/motors.c **** {
  79               	.LM0:
  80               	.LFBB1:
  81               	/* prologue: function */
  82               	/* frame size = 0 */
 129:base_motion/motors.c ****     MOTORS_ENABLE();
  84               	.LM1:
  85 0000 409A      		sbi 40-32,0
  86               	/* epilogue start */
 130:base_motion/motors.c **** }
  88               	.LM2:
  89 0002 0895      		ret
  91               	.Lscope1:
  93               		.stabd	78,0,0
  95               	.global	Motors_Disable
  97               	Motors_Disable:
  98               		.stabd	46,0,0
 131:base_motion/motors.c **** 
 132:base_motion/motors.c **** void Motors_Disable()
 133:base_motion/motors.c **** {
 100               	.LM3:
 101               	.LFBB2:
 102               	/* prologue: function */
 103               	/* frame size = 0 */
 134:base_motion/motors.c ****     MOTORS_DISABLE();
 105               	.LM4:
 106 0004 4098      		cbi 40-32,0
 107               	/* epilogue start */
 135:base_motion/motors.c **** }
 109               	.LM5:
 110 0006 0895      		ret
 112               	.Lscope2:
 114               		.stabd	78,0,0
 118               	.global	Motors_Set_Direction
 120               	Motors_Set_Direction:
 121               		.stabd	46,0,0
 136:base_motion/motors.c **** 
 137:base_motion/motors.c **** /** Sets the motor direction for the appropriate motor.
 138:base_motion/motors.c ****  *
 139:base_motion/motors.c ****  *  If you try to change motor direction it will switch to motor brake until called again.
 140:base_motion/motors.c ****  *
 141:base_motion/motors.c ****  */
 142:base_motion/motors.c **** void Motors_Set_Direction( uint8_t motor_index, uint8_t motor_direction )
 143:base_motion/motors.c **** {
 123               	.LM6:
 124               	.LFBB3:
 125               	/* prologue: function */
 126               	/* frame size = 0 */
 144:base_motion/motors.c ****     static uint8_t last_direction[2];
 145:base_motion/motors.c **** 
 146:base_motion/motors.c ****     if ((MOTORS_L_INDEX == motor_index) && (last_direction[MOTORS_L_INDEX] != motor_direction))
 128               	.LM7:
 129 0008 8823      		tst r24
 130 000a 01F4      		brne .L6
 131 000c 8091 0000 		lds r24,last_direction.1272
 132 0010 8617      		cp r24,r22
 133 0012 01F4      		brne .+2
 134 0014 00C0      		rjmp .L20
 147:base_motion/motors.c ****     {
 148:base_motion/motors.c ****         if ((MOTORS_BRAKE == last_direction[MOTORS_L_INDEX]) ||
 136               	.LM8:
 137 0016 8230      		cpi r24,lo8(2)
 138 0018 00F4      		brsh .L8
 149:base_motion/motors.c ****             (MOTORS_COAST == last_direction[MOTORS_L_INDEX]))
 150:base_motion/motors.c ****         {
 151:base_motion/motors.c ****             if (MOTORS_FORWARD == motor_direction)
 140               	.LM9:
 141 001a 6230      		cpi r22,lo8(2)
 142 001c 01F4      		brne .L9
 152:base_motion/motors.c ****             {
 153:base_motion/motors.c ****                 MOTORS_L_FORWARD();
 144               	.LM10:
 145 001e 2D98      		cbi 37-32,5
 146 0020 2C9A      		sbi 37-32,4
 147 0022 00C0      		rjmp .L10
 148               	.L9:
 154:base_motion/motors.c ****             }
 155:base_motion/motors.c ****             else if (MOTORS_REVERSE == motor_direction)
 150               	.LM11:
 151 0024 6330      		cpi r22,lo8(3)
 152 0026 01F4      		brne .L11
 156:base_motion/motors.c ****             {
 157:base_motion/motors.c ****                 MOTORS_L_REVERSE();
 154               	.LM12:
 155 0028 2C98      		cbi 37-32,4
 156 002a 00C0      		rjmp .L21
 157               	.L11:
 158:base_motion/motors.c ****             }
 159:base_motion/motors.c ****             else if (MOTORS_COAST == motor_direction)
 159               	.LM13:
 160 002c 6130      		cpi r22,lo8(1)
 161 002e 01F4      		brne .L12
 160:base_motion/motors.c ****             {
 161:base_motion/motors.c ****                 MOTORS_L_COAST();
 163               	.LM14:
 164 0030 2C98      		cbi 37-32,4
 165 0032 2D98      		cbi 37-32,5
 166 0034 00C0      		rjmp .L10
 167               	.L12:
 162:base_motion/motors.c ****             }
 163:base_motion/motors.c ****             else if (MOTORS_BRAKE == motor_direction)
 169               	.LM15:
 170 0036 6623      		tst r22
 171 0038 01F4      		brne .L10
 164:base_motion/motors.c ****             {
 165:base_motion/motors.c ****                 MOTORS_L_BRAKE();
 173               	.LM16:
 174 003a 2C9A      		sbi 37-32,4
 175               	.L21:
 176 003c 2D9A      		sbi 37-32,5
 177               	.L10:
 166:base_motion/motors.c ****             }
 167:base_motion/motors.c **** 
 168:base_motion/motors.c ****             last_direction[MOTORS_L_INDEX] = motor_direction;
 179               	.LM17:
 180 003e 6093 0000 		sts last_direction.1272,r22
 181 0042 0895      		ret
 182               	.L8:
 169:base_motion/motors.c ****         }
 170:base_motion/motors.c ****         else
 171:base_motion/motors.c ****         {
 172:base_motion/motors.c ****             if (MOTORS_BRAKE == motor_direction)
 184               	.LM18:
 185 0044 6623      		tst r22
 186 0046 01F4      		brne .L13
 173:base_motion/motors.c ****             {
 174:base_motion/motors.c ****                 MOTORS_L_BRAKE();
 188               	.LM19:
 189 0048 2C9A      		sbi 37-32,4
 190 004a 2D9A      		sbi 37-32,5
 175:base_motion/motors.c ****                 last_direction[MOTORS_L_INDEX] = MOTORS_BRAKE;
 192               	.LM20:
 193 004c 1092 0000 		sts last_direction.1272,__zero_reg__
 194 0050 0895      		ret
 195               	.L13:
 176:base_motion/motors.c ****             }
 177:base_motion/motors.c ****             else
 178:base_motion/motors.c ****             {
 179:base_motion/motors.c ****                 MOTORS_L_COAST();
 197               	.LM21:
 198 0052 2C98      		cbi 37-32,4
 199 0054 2D98      		cbi 37-32,5
 180:base_motion/motors.c ****                 last_direction[MOTORS_L_INDEX] = MOTORS_COAST;
 201               	.LM22:
 202 0056 81E0      		ldi r24,lo8(1)
 203 0058 8093 0000 		sts last_direction.1272,r24
 204 005c 0895      		ret
 205               	.L6:
 181:base_motion/motors.c ****             }
 182:base_motion/motors.c ****         }
 183:base_motion/motors.c ****     }
 184:base_motion/motors.c ****     else if ((MOTORS_R_INDEX == motor_index) && (last_direction[MOTORS_R_INDEX] != motor_direction)
 207               	.LM23:
 208 005e 8130      		cpi r24,lo8(1)
 209 0060 01F4      		brne .L20
 210 0062 9091 0000 		lds r25,last_direction.1272+1
 211 0066 9617      		cp r25,r22
 212 0068 01F0      		breq .L20
 185:base_motion/motors.c ****     {
 186:base_motion/motors.c ****         if ((MOTORS_BRAKE == last_direction[MOTORS_R_INDEX]) ||
 214               	.LM24:
 215 006a 9230      		cpi r25,lo8(2)
 216 006c 00F4      		brsh .L14
 187:base_motion/motors.c ****             (MOTORS_COAST == last_direction[MOTORS_R_INDEX]))
 188:base_motion/motors.c ****         {
 189:base_motion/motors.c ****             if (MOTORS_FORWARD == motor_direction)
 218               	.LM25:
 219 006e 6230      		cpi r22,lo8(2)
 220 0070 01F4      		brne .L15
 190:base_motion/motors.c ****             {
 191:base_motion/motors.c ****                 MOTORS_R_FORWARD();
 222               	.LM26:
 223 0072 2B98      		cbi 37-32,3
 224 0074 289A      		sbi 37-32,0
 225 0076 00C0      		rjmp .L16
 226               	.L15:
 192:base_motion/motors.c ****             }
 193:base_motion/motors.c ****             else if (MOTORS_REVERSE == motor_direction)
 228               	.LM27:
 229 0078 6330      		cpi r22,lo8(3)
 230 007a 01F4      		brne .L17
 194:base_motion/motors.c ****             {
 195:base_motion/motors.c ****                 MOTORS_R_REVERSE();
 232               	.LM28:
 233 007c 2898      		cbi 37-32,0
 234 007e 00C0      		rjmp .L22
 235               	.L17:
 196:base_motion/motors.c ****             }
 197:base_motion/motors.c ****             else if (MOTORS_COAST == motor_direction)
 237               	.LM29:
 238 0080 6130      		cpi r22,lo8(1)
 239 0082 01F4      		brne .L18
 198:base_motion/motors.c ****             {
 199:base_motion/motors.c ****                 MOTORS_R_COAST();
 241               	.LM30:
 242 0084 2898      		cbi 37-32,0
 243 0086 2B98      		cbi 37-32,3
 244 0088 00C0      		rjmp .L16
 245               	.L18:
 200:base_motion/motors.c ****             }
 201:base_motion/motors.c ****             else if (MOTORS_BRAKE == motor_direction)
 247               	.LM31:
 248 008a 6623      		tst r22
 249 008c 01F4      		brne .L16
 202:base_motion/motors.c ****             {
 203:base_motion/motors.c ****                 MOTORS_R_BRAKE();
 251               	.LM32:
 252 008e 289A      		sbi 37-32,0
 253               	.L22:
 254 0090 2B9A      		sbi 37-32,3
 255               	.L16:
 204:base_motion/motors.c ****             }
 205:base_motion/motors.c **** 
 206:base_motion/motors.c ****             last_direction[MOTORS_R_INDEX] = motor_direction;
 257               	.LM33:
 258 0092 6093 0000 		sts last_direction.1272+1,r22
 259 0096 0895      		ret
 260               	.L14:
 207:base_motion/motors.c ****         }
 208:base_motion/motors.c ****         else
 209:base_motion/motors.c ****         {
 210:base_motion/motors.c ****             if (MOTORS_BRAKE == motor_direction)
 262               	.LM34:
 263 0098 6623      		tst r22
 264 009a 01F4      		brne .L19
 211:base_motion/motors.c ****             {
 212:base_motion/motors.c ****                 MOTORS_R_BRAKE();
 266               	.LM35:
 267 009c 289A      		sbi 37-32,0
 268 009e 2B9A      		sbi 37-32,3
 213:base_motion/motors.c ****                 last_direction[MOTORS_R_INDEX] = MOTORS_BRAKE;
 270               	.LM36:
 271 00a0 1092 0000 		sts last_direction.1272+1,__zero_reg__
 272 00a4 0895      		ret
 273               	.L19:
 214:base_motion/motors.c ****             }
 215:base_motion/motors.c ****             else
 216:base_motion/motors.c ****             {
 217:base_motion/motors.c ****                 MOTORS_R_COAST();
 275               	.LM37:
 276 00a6 2898      		cbi 37-32,0
 277 00a8 2B98      		cbi 37-32,3
 218:base_motion/motors.c ****                 last_direction[MOTORS_R_INDEX] = MOTORS_COAST;
 279               	.LM38:
 280 00aa 8093 0000 		sts last_direction.1272+1,r24
 281               	.L20:
 282 00ae 0895      		ret
 287               	.Lscope3:
 289               		.stabd	78,0,0
 291               	.global	Motors_Init
 293               	Motors_Init:
 294               		.stabd	46,0,0
  96:base_motion/motors.c **** {
 296               	.LM39:
 297               	.LFBB4:
 298               	/* prologue: function */
 299               	/* frame size = 0 */
  97:base_motion/motors.c ****     OUTPUT_PIN(MOTORS_STANDBY_PORT, MOTORS_STANDBY_PIN);
 301               	.LM40:
 302 00b0 389A      		sbi 39-32,0
  98:base_motion/motors.c ****     OUTPUT_PIN(MOTORS_A_IN1_PORT, MOTORS_A_IN1_PIN);
 304               	.LM41:
 305 00b2 209A      		sbi 36-32,0
  99:base_motion/motors.c ****     OUTPUT_PIN(MOTORS_A_IN2_PORT, MOTORS_A_IN2_PIN);
 307               	.LM42:
 308 00b4 239A      		sbi 36-32,3
 100:base_motion/motors.c ****     OUTPUT_PIN(MOTORS_B_IN1_PORT, MOTORS_B_IN1_PIN);
 310               	.LM43:
 311 00b6 249A      		sbi 36-32,4
 101:base_motion/motors.c ****     OUTPUT_PIN(MOTORS_B_IN2_PORT, MOTORS_B_IN2_PIN);
 313               	.LM44:
 314 00b8 259A      		sbi 36-32,5
 103:base_motion/motors.c ****     OUTPUT_PIN(MOTORS_A_PWM_PORT, MOTORS_A_PWM_PIN);
 316               	.LM45:
 317 00ba 219A      		sbi 36-32,1
 104:base_motion/motors.c ****     OUTPUT_PIN(MOTORS_B_PWM_PORT, MOTORS_B_PWM_PIN);
 319               	.LM46:
 320 00bc 229A      		sbi 36-32,2
 107:base_motion/motors.c ****     TCCR1A = BIT(COM1A1) |
 322               	.LM47:
 323 00be 81EA      		ldi r24,lo8(-95)
 324 00c0 8093 8000 		sts 128,r24
 111:base_motion/motors.c ****     TCCR1B = BIT(CS10);
 326               	.LM48:
 327 00c4 81E0      		ldi r24,lo8(1)
 328 00c6 8093 8100 		sts 129,r24
 113:base_motion/motors.c ****     OCR1A = 0;
 330               	.LM49:
 331 00ca 1092 8900 		sts (136)+1,__zero_reg__
 332 00ce 1092 8800 		sts 136,__zero_reg__
 114:base_motion/motors.c ****     OCR1B = 0;
 334               	.LM50:
 335 00d2 1092 8B00 		sts (138)+1,__zero_reg__
 336 00d6 1092 8A00 		sts 138,__zero_reg__
 116:base_motion/motors.c ****     BIT_CLEAR( PRR, PRTIM1 );
 338               	.LM51:
 339 00da E4E6      		ldi r30,lo8(100)
 340 00dc F0E0      		ldi r31,hi8(100)
 341 00de 8081      		ld r24,Z
 342 00e0 877F      		andi r24,lo8(-9)
 343 00e2 8083      		st Z,r24
 119:base_motion/motors.c ****     MOTORS_ENABLE();
 345               	.LM52:
 346 00e4 409A      		sbi 40-32,0
 121:base_motion/motors.c ****     Motors_Set_Direction(MOTORS_L_INDEX, MOTORS_BRAKE);
 348               	.LM53:
 349 00e6 80E0      		ldi r24,lo8(0)
 350 00e8 60E0      		ldi r22,lo8(0)
 351 00ea 0E94 0000 		call Motors_Set_Direction
 122:base_motion/motors.c ****     Motors_Set_Direction(MOTORS_R_INDEX, MOTORS_BRAKE);
 353               	.LM54:
 354 00ee 81E0      		ldi r24,lo8(1)
 355 00f0 60E0      		ldi r22,lo8(0)
 356 00f2 0E94 0000 		call Motors_Set_Direction
 357               	/* epilogue start */
 125:base_motion/motors.c **** }
 359               	.LM55:
 360 00f6 0895      		ret
 362               	.Lscope4:
 364               		.stabd	78,0,0
 368               	.global	Motors_Set_Power
 370               	Motors_Set_Power:
 371               		.stabd	46,0,0
 219:base_motion/motors.c ****             }
 220:base_motion/motors.c ****         }
 221:base_motion/motors.c ****     }
 222:base_motion/motors.c **** }
 223:base_motion/motors.c **** 
 224:base_motion/motors.c **** /** Sets the PWM power for the appropriate motor.
 225:base_motion/motors.c ****  */
 226:base_motion/motors.c **** void Motors_Set_Power( uint8_t motor_index, uint8_t motor_power)
 227:base_motion/motors.c **** {
 373               	.LM56:
 374               	.LFBB5:
 375               	/* prologue: function */
 376               	/* frame size = 0 */
 228:base_motion/motors.c ****     if (MOTORS_L_INDEX == motor_index)
 378               	.LM57:
 379 00f8 8823      		tst r24
 380 00fa 01F4      		brne .L26
 229:base_motion/motors.c ****     {
 230:base_motion/motors.c ****         MOTORS_L_POWER = motor_power;
 382               	.LM58:
 383 00fc 862F      		mov r24,r22
 384 00fe 90E0      		ldi r25,lo8(0)
 385 0100 9093 8B00 		sts (138)+1,r25
 386 0104 8093 8A00 		sts 138,r24
 387 0108 0895      		ret
 388               	.L26:
 231:base_motion/motors.c ****     }
 232:base_motion/motors.c ****     else if (MOTORS_R_INDEX == motor_index)
 390               	.LM59:
 391 010a 8130      		cpi r24,lo8(1)
 392 010c 01F4      		brne .L28
 233:base_motion/motors.c ****     {
 234:base_motion/motors.c ****         MOTORS_R_POWER = motor_power;
 394               	.LM60:
 395 010e 862F      		mov r24,r22
 396 0110 90E0      		ldi r25,lo8(0)
 397 0112 9093 8900 		sts (136)+1,r25
 398 0116 8093 8800 		sts 136,r24
 399               	.L28:
 400 011a 0895      		ret
 402               	.Lscope5:
 404               		.stabd	78,0,0
 405               		.lcomm last_direction.1272,2
 408               	.Letext0:
 409               	.global __do_clear_bss
DEFINED SYMBOLS
                            *ABS*:00000000 motors.c
     /tmp/ccAX6vw5.s:2      *ABS*:0000003f __SREG__
     /tmp/ccAX6vw5.s:3      *ABS*:0000003e __SP_H__
     /tmp/ccAX6vw5.s:4      *ABS*:0000003d __SP_L__
     /tmp/ccAX6vw5.s:5      *ABS*:00000034 __CCP__
     /tmp/ccAX6vw5.s:6      *ABS*:00000000 __tmp_reg__
     /tmp/ccAX6vw5.s:7      *ABS*:00000001 __zero_reg__
     /tmp/ccAX6vw5.s:76     .text:00000000 Motors_Enable
     /tmp/ccAX6vw5.s:97     .text:00000004 Motors_Disable
     /tmp/ccAX6vw5.s:120    .text:00000008 Motors_Set_Direction
                             .bss:00000000 last_direction.1272
     /tmp/ccAX6vw5.s:293    .text:000000b0 Motors_Init
     /tmp/ccAX6vw5.s:370    .text:000000f8 Motors_Set_Power

UNDEFINED SYMBOLS
__do_clear_bss
