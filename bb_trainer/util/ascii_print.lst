   1               		.file	"ascii_print.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__CCP__  = 0x34
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
  10               		.text
  11               	.Ltext0:
  72               		.data
  73               	.LC0:
  74 0000 3078 2530 		.string	"0x%0.2X "
  74      2E32 5820 
  74      00
  75               		.text
  81               	.global	Bin_to_AsciiHex
  83               	Bin_to_AsciiHex:
  84               		.stabd	46,0,0
   1:util/ascii_print.c **** /** @file 
   2:util/ascii_print.c ****  *  Functions to output more user friendly representations.
   3:util/ascii_print.c ****  *
   4:util/ascii_print.c ****  *  Created:    03/10/2011 11:11:16 PM
   5:util/ascii_print.c ****  *  Compiler:   gcc
   6:util/ascii_print.c ****  *  @author:    Sawyer Larkin (SJL), DATAProject@therobotguy.com
   7:util/ascii_print.c ****  *
   8:util/ascii_print.c ****  *  Last Changed:   $id$
   9:util/ascii_print.c ****  *
  10:util/ascii_print.c ****  */
  11:util/ascii_print.c **** 
  12:util/ascii_print.c **** /* #####   HEADER FILE INCLUDES   ################################################### */
  13:util/ascii_print.c **** #include <inttypes.h>
  14:util/ascii_print.c **** #include <stdio.h>
  15:util/ascii_print.c **** 
  16:util/ascii_print.c **** #include "ascii_print.h"
  17:util/ascii_print.c **** 
  18:util/ascii_print.c **** /* #####   MACROS  -  LOCAL TO THIS SOURCE FILE   ################################### */
  19:util/ascii_print.c **** 
  20:util/ascii_print.c **** /* #####   TYPE DEFINITIONS  -  LOCAL TO THIS SOURCE FILE   ######################### */
  21:util/ascii_print.c **** 
  22:util/ascii_print.c **** /* #####   DATA TYPES  -  LOCAL TO THIS SOURCE FILE   ############################### */
  23:util/ascii_print.c **** 
  24:util/ascii_print.c **** /* #####   VARIABLES  -  LOCAL TO THIS SOURCE FILE   ################################ */
  25:util/ascii_print.c **** 
  26:util/ascii_print.c **** /* #####   PROTOTYPES  -  LOCAL TO THIS SOURCE FILE   ############################### */
  27:util/ascii_print.c **** 
  28:util/ascii_print.c **** /* #####   FUNCTION DEFINITIONS  -  EXPORTED FUNCTIONS   ############################ */
  29:util/ascii_print.c **** 
  30:util/ascii_print.c **** /** Writes a c-style string into @a *ascii_out, which contains an ascii 
  31:util/ascii_print.c ****  *  hexidecimal representation of @a data_length values present in @a *byte_buf.
  32:util/ascii_print.c ****  *
  33:util/ascii_print.c ****  *  If @a *format is not NULL it will be used as the printf format string. 
  34:util/ascii_print.c ****  *  Please note that the format string must include a single decimal parameter. 
  35:util/ascii_print.c ****  *  If @a *format is NULL the format string *  this format string will be used: 
  36:util/ascii_print.c ****  *  <tt>"0x%0.2X "</tt>
  37:util/ascii_print.c ****  *
  38:util/ascii_print.c ****  *  @a *ascii_out must be pre-allocated and large enough to hold the ascii text 
  39:util/ascii_print.c ****  *  string. If @a *format is NULL and the default format string is used, 
  40:util/ascii_print.c ****  *  @a *ascii_out must be at least 5 times larger than data-length, plus a 
  41:util/ascii_print.c ****  *  single byte used for c-string termination.
  42:util/ascii_print.c ****  *
  43:util/ascii_print.c ****  */
  44:util/ascii_print.c ****     int
  45:util/ascii_print.c **** Bin_to_AsciiHex ( char ascii_out[], int data_length, uint8_t byte_buf[], char format[] )
  46:util/ascii_print.c **** {
  86               	.LM0:
  87               	.LFBB1:
  88 0000 6F92      		push r6
  89 0002 7F92      		push r7
  90 0004 8F92      		push r8
  91 0006 9F92      		push r9
  92 0008 AF92      		push r10
  93 000a BF92      		push r11
  94 000c CF92      		push r12
  95 000e DF92      		push r13
  96 0010 EF92      		push r14
  97 0012 FF92      		push r15
  98 0014 0F93      		push r16
  99 0016 1F93      		push r17
 100 0018 DF93      		push r29
 101 001a CF93      		push r28
 102 001c CDB7      		in r28,__SP_L__
 103 001e DEB7      		in r29,__SP_H__
 104 0020 2997      		sbiw r28,9
 105 0022 0FB6      		in __tmp_reg__,__SREG__
 106 0024 F894      		cli
 107 0026 DEBF      		out __SP_H__,r29
 108 0028 0FBE      		out __SREG__,__tmp_reg__
 109 002a CDBF      		out __SP_L__,r28
 110               	/* prologue: function */
 111               	/* frame size = 9 */
 112 002c 3C01      		movw r6,r24
 113 002e 4B01      		movw r8,r22
 114 0030 5A01      		movw r10,r20
 115 0032 6901      		movw r12,r18
  47:util/ascii_print.c ****     const char default_format[] = {"0x%0.2X "};
  48:util/ascii_print.c ****     int num_bytes = 0;
  49:util/ascii_print.c **** 
  50:util/ascii_print.c ****     if ((data_length > 0) && (byte_buf != NULL) && (ascii_out != NULL))
 117               	.LM1:
 118 0034 1616      		cp __zero_reg__,r22
 119 0036 1706      		cpc __zero_reg__,r23
 120 0038 04F0      		brlt .+2
 121 003a 00C0      		rjmp .L2
 122 003c 4115      		cp r20,__zero_reg__
 123 003e 5105      		cpc r21,__zero_reg__
 124 0040 01F4      		brne .+2
 125 0042 00C0      		rjmp .L2
 126 0044 0097      		sbiw r24,0
 127 0046 01F4      		brne .+2
 128 0048 00C0      		rjmp .L2
  51:util/ascii_print.c ****     {
  52:util/ascii_print.c ****         if (NULL == format)
 130               	.LM2:
 131 004a 2115      		cp r18,__zero_reg__
 132 004c 3105      		cpc r19,__zero_reg__
 133 004e 01F4      		brne .L3
  53:util/ascii_print.c ****         {
  54:util/ascii_print.c ****             format = (char*) &default_format;
 135               	.LM3:
 136 0050 6E01      		movw r12,r28
 137 0052 0894      		sec
 138 0054 C11C      		adc r12,__zero_reg__
 139 0056 D11C      		adc r13,__zero_reg__
 140               	.L3:
  47:util/ascii_print.c ****     const char default_format[] = {"0x%0.2X "};
 142               	.LM4:
 143 0058 DE01      		movw r26,r28
 144 005a 1196      		adiw r26,1
 145 005c E0E0      		ldi r30,lo8(.LC0)
 146 005e F0E0      		ldi r31,hi8(.LC0)
 147 0060 89E0      		ldi r24,lo8(9)
 148               	.L4:
 149 0062 0190      		ld r0,Z+
 150 0064 0D92      		st X+,r0
 151 0066 8150      		subi r24,lo8(-(-1))
 152 0068 01F4      		brne .L4
 153 006a 00E0      		ldi r16,lo8(0)
 154 006c 10E0      		ldi r17,hi8(0)
 155 006e EE24      		clr r14
 156 0070 FF24      		clr r15
 157               	.L5:
 158               	.LBB2:
  55:util/ascii_print.c ****         }
  56:util/ascii_print.c **** 
  57:util/ascii_print.c ****         for (int i = 0; i < data_length; i++)
  58:util/ascii_print.c ****         {
  59:util/ascii_print.c ****             num_bytes += sprintf(&ascii_out[num_bytes], format, (unsigned char)byte_buf[i]);
 160               	.LM5:
 161 0072 00D0      		rcall .
 162 0074 00D0      		rcall .
 163 0076 00D0      		rcall .
 164 0078 ADB7      		in r26,__SP_L__
 165 007a BEB7      		in r27,__SP_H__
 166 007c 1196      		adiw r26,1
 167 007e C301      		movw r24,r6
 168 0080 800F      		add r24,r16
 169 0082 911F      		adc r25,r17
 170 0084 EDB7      		in r30,__SP_L__
 171 0086 FEB7      		in r31,__SP_H__
 172 0088 9283      		std Z+2,r25
 173 008a 8183      		std Z+1,r24
 174 008c 1396      		adiw r26,2+1
 175 008e DC92      		st X,r13
 176 0090 CE92      		st -X,r12
 177 0092 1297      		sbiw r26,2
 178 0094 F501      		movw r30,r10
 179 0096 EE0D      		add r30,r14
 180 0098 FF1D      		adc r31,r15
 181 009a 8081      		ld r24,Z
 182 009c 1496      		adiw r26,4
 183 009e 8C93      		st X,r24
 184 00a0 1497      		sbiw r26,4
 185 00a2 1596      		adiw r26,5
 186 00a4 1C92      		st X,__zero_reg__
 187 00a6 0E94 0000 		call sprintf
 188 00aa 080F      		add r16,r24
 189 00ac 191F      		adc r17,r25
  57:util/ascii_print.c ****         for (int i = 0; i < data_length; i++)
 191               	.LM6:
 192 00ae 0894      		sec
 193 00b0 E11C      		adc r14,__zero_reg__
 194 00b2 F11C      		adc r15,__zero_reg__
 195 00b4 8DB7      		in r24,__SP_L__
 196 00b6 9EB7      		in r25,__SP_H__
 197 00b8 0696      		adiw r24,6
 198 00ba 0FB6      		in __tmp_reg__,__SREG__
 199 00bc F894      		cli
 200 00be 9EBF      		out __SP_H__,r25
 201 00c0 0FBE      		out __SREG__,__tmp_reg__
 202 00c2 8DBF      		out __SP_L__,r24
 203 00c4 E814      		cp r14,r8
 204 00c6 F904      		cpc r15,r9
 205 00c8 04F0      		brlt .L5
 206 00ca 00C0      		rjmp .L6
 207               	.L2:
 208 00cc 00E0      		ldi r16,lo8(0)
 209 00ce 10E0      		ldi r17,hi8(0)
 210               	.L6:
 211               	.LBE2:
  60:util/ascii_print.c ****         }
  61:util/ascii_print.c ****     }
  62:util/ascii_print.c **** 
  63:util/ascii_print.c ****     return num_bytes;
  64:util/ascii_print.c **** }		/* Bin_to_AsciiHex */
 213               	.LM7:
 214 00d0 C801      		movw r24,r16
 215               	/* epilogue start */
 216 00d2 2996      		adiw r28,9
 217 00d4 0FB6      		in __tmp_reg__,__SREG__
 218 00d6 F894      		cli
 219 00d8 DEBF      		out __SP_H__,r29
 220 00da 0FBE      		out __SREG__,__tmp_reg__
 221 00dc CDBF      		out __SP_L__,r28
 222 00de CF91      		pop r28
 223 00e0 DF91      		pop r29
 224 00e2 1F91      		pop r17
 225 00e4 0F91      		pop r16
 226 00e6 FF90      		pop r15
 227 00e8 EF90      		pop r14
 228 00ea DF90      		pop r13
 229 00ec CF90      		pop r12
 230 00ee BF90      		pop r11
 231 00f0 AF90      		pop r10
 232 00f2 9F90      		pop r9
 233 00f4 8F90      		pop r8
 234 00f6 7F90      		pop r7
 235 00f8 6F90      		pop r6
 236 00fa 0895      		ret
 245               	.Lscope1:
 247               		.stabd	78,0,0
 249               	.Letext0:
 250               	.global __do_copy_data
DEFINED SYMBOLS
                            *ABS*:00000000 ascii_print.c
     /tmp/cc7aMNa6.s:2      *ABS*:0000003f __SREG__
     /tmp/cc7aMNa6.s:3      *ABS*:0000003e __SP_H__
     /tmp/cc7aMNa6.s:4      *ABS*:0000003d __SP_L__
     /tmp/cc7aMNa6.s:5      *ABS*:00000034 __CCP__
     /tmp/cc7aMNa6.s:6      *ABS*:00000000 __tmp_reg__
     /tmp/cc7aMNa6.s:7      *ABS*:00000001 __zero_reg__
     /tmp/cc7aMNa6.s:83     .text:00000000 Bin_to_AsciiHex

UNDEFINED SYMBOLS
sprintf
__do_copy_data
