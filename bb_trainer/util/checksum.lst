   1               		.file	"checksum.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__CCP__  = 0x34
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
  10               		.text
  11               	.Ltext0:
  67               	.global	CRC8_Update
  69               	CRC8_Update:
  70               		.stabd	46,0,0
   1:util/checksum.c **** /** @file checksum.c
   2:util/checksum.c ****  *  
   3:util/checksum.c ****  *
   4:util/checksum.c ****  *  Created:    03/09/2011 11:30:14 PM
   5:util/checksum.c ****  *  Compiler:   gcc
   6:util/checksum.c ****  *  @author:    Sawyer Larkin (SJL), DATAProject@therobotguy.com
   7:util/checksum.c ****  *
   8:util/checksum.c ****  *  Last Changed:   $id$
   9:util/checksum.c ****  *
  10:util/checksum.c ****  */
  11:util/checksum.c **** 
  12:util/checksum.c **** #include "checksum.h"
  13:util/checksum.c **** 
  14:util/checksum.c **** // Value needed for x8+x2+x+1
  15:util/checksum.c **** #define POLYVAL 0x8C
  16:util/checksum.c **** 
  17:util/checksum.c **** /** Calculates the CRC 8 checksum over a range of data.
  18:util/checksum.c ****  *  
  19:util/checksum.c ****  *  @param  *data       Pointer to the data buffer to be read.
  20:util/checksum.c ****  *  @param  num_bytes   Number of bytes to read from @a data.
  21:util/checksum.c ****  *  @param  seed        Starting value for the checksum calculations.
  22:util/checksum.c ****  *
  23:util/checksum.c ****  *  @returns    The calculated checksum.
  24:util/checksum.c ****  */
  25:util/checksum.c **** uint8_t
  26:util/checksum.c **** CRC8_Checksum( uint8_t *data, uint32_t num_bytes, uint8_t seed )
  27:util/checksum.c **** {
  28:util/checksum.c ****     uint8_t crc = seed;
  29:util/checksum.c **** 
  30:util/checksum.c ****     for (int i = 0; i < num_bytes; i++)
  31:util/checksum.c ****     {
  32:util/checksum.c ****         CRC8_Update(data[i], &crc); 
  33:util/checksum.c ****     }
  34:util/checksum.c **** 
  35:util/checksum.c ****     return crc;
  36:util/checksum.c **** }
  37:util/checksum.c **** 
  38:util/checksum.c **** void 
  39:util/checksum.c **** CRC8_Update( uint8_t new_byte, uint8_t * const current_crc )
  40:util/checksum.c **** {
  72               	.LM0:
  73               	.LFBB1:
  74               	/* prologue: function */
  75               	/* frame size = 0 */
  76 0000 382F      		mov r19,r24
  77 0002 FB01      		movw r30,r22
  41:util/checksum.c ****    uint8_t new_crc;
  42:util/checksum.c **** 
  43:util/checksum.c ****    new_crc = *current_crc;
  79               	.LM1:
  80 0004 9081      		ld r25,Z
  81 0006 20E0      		ldi r18,lo8(0)
  82               	.LBB2:
  44:util/checksum.c **** 
  45:util/checksum.c ****    for (uint8_t i = 0; i < 8; i++) 
  46:util/checksum.c ****    {
  47:util/checksum.c ****       if ((new_crc ^ new_byte) & 1) 
  48:util/checksum.c ****       {
  49:util/checksum.c ****          new_crc = (new_crc >> 1 ) ^ POLYVAL;
  84               	.LM2:
  85 0008 4CE8      		ldi r20,lo8(-116)
  86               	.L5:
  47:util/checksum.c ****       if ((new_crc ^ new_byte) & 1) 
  88               	.LM3:
  89 000a 892F      		mov r24,r25
  90 000c 8327      		eor r24,r19
  91 000e 9695      		lsr r25
  92 0010 80FD      		sbrc r24,0
  94               	.LM4:
  95 0012 9427      		eor r25,r20
  96               	.L3:
  45:util/checksum.c ****    for (uint8_t i = 0; i < 8; i++) 
  98               	.LM5:
  99 0014 2F5F      		subi r18,lo8(-(1))
 100 0016 2830      		cpi r18,lo8(8)
 101 0018 01F0      		breq .L4
  50:util/checksum.c ****       }
  51:util/checksum.c ****       else 
  52:util/checksum.c ****       {
  53:util/checksum.c ****          new_crc >>= 1;
  54:util/checksum.c ****       }
  55:util/checksum.c **** 
  56:util/checksum.c ****       new_byte >>= 1;
 103               	.LM6:
 104 001a 3695      		lsr r19
 105 001c 00C0      		rjmp .L5
 106               	.L4:
 107               	.LBE2:
  57:util/checksum.c ****    }
  58:util/checksum.c **** 
  59:util/checksum.c ****    *current_crc = new_crc;
 109               	.LM7:
 110 001e 9083      		st Z,r25
 111               	/* epilogue start */
  60:util/checksum.c **** }
 113               	.LM8:
 114 0020 0895      		ret
 122               	.Lscope1:
 124               		.stabd	78,0,0
 129               	.global	CRC8_Checksum
 131               	CRC8_Checksum:
 132               		.stabd	46,0,0
  27:util/checksum.c **** {
 134               	.LM9:
 135               	.LFBB2:
 136 0022 6F92      		push r6
 137 0024 7F92      		push r7
 138 0026 8F92      		push r8
 139 0028 9F92      		push r9
 140 002a AF92      		push r10
 141 002c BF92      		push r11
 142 002e CF92      		push r12
 143 0030 DF92      		push r13
 144 0032 EF92      		push r14
 145 0034 FF92      		push r15
 146 0036 0F93      		push r16
 147 0038 1F93      		push r17
 148 003a DF93      		push r29
 149 003c CF93      		push r28
 150 003e 0F92      		push __tmp_reg__
 151 0040 CDB7      		in r28,__SP_L__
 152 0042 DEB7      		in r29,__SP_H__
 153               	/* prologue: function */
 154               	/* frame size = 1 */
 155 0044 4C01      		movw r8,r24
 156 0046 5A01      		movw r10,r20
 157 0048 6B01      		movw r12,r22
  28:util/checksum.c ****     uint8_t crc = seed;
 159               	.LM10:
 160 004a 2983      		std Y+1,r18
 161 004c EE24      		clr r14
 162 004e FF24      		clr r15
 163 0050 8701      		movw r16,r14
 164               	.LBB3:
  32:util/checksum.c ****         CRC8_Update(data[i], &crc); 
 166               	.LM11:
 167 0052 3E01      		movw r6,r28
 168 0054 0894      		sec
 169 0056 611C      		adc r6,__zero_reg__
 170 0058 711C      		adc r7,__zero_reg__
 171 005a 00C0      		rjmp .L8
 172               	.L9:
 173 005c F401      		movw r30,r8
 174 005e EE0D      		add r30,r14
 175 0060 FF1D      		adc r31,r15
 176 0062 8081      		ld r24,Z
 177 0064 B301      		movw r22,r6
 178 0066 0E94 0000 		call CRC8_Update
 179 006a 0894      		sec
 180 006c E11C      		adc r14,__zero_reg__
 181 006e F11C      		adc r15,__zero_reg__
 182 0070 011D      		adc r16,__zero_reg__
 183 0072 111D      		adc r17,__zero_reg__
 184               	.L8:
  30:util/checksum.c ****     for (int i = 0; i < num_bytes; i++)
 186               	.LM12:
 187 0074 EA14      		cp r14,r10
 188 0076 FB04      		cpc r15,r11
 189 0078 0C05      		cpc r16,r12
 190 007a 1D05      		cpc r17,r13
 191 007c 00F0      		brlo .L9
 192               	.LBE3:
  36:util/checksum.c **** }
 194               	.LM13:
 195 007e 8981      		ldd r24,Y+1
 196               	/* epilogue start */
 197 0080 0F90      		pop __tmp_reg__
 198 0082 CF91      		pop r28
 199 0084 DF91      		pop r29
 200 0086 1F91      		pop r17
 201 0088 0F91      		pop r16
 202 008a FF90      		pop r15
 203 008c EF90      		pop r14
 204 008e DF90      		pop r13
 205 0090 CF90      		pop r12
 206 0092 BF90      		pop r11
 207 0094 AF90      		pop r10
 208 0096 9F90      		pop r9
 209 0098 8F90      		pop r8
 210 009a 7F90      		pop r7
 211 009c 6F90      		pop r6
 212 009e 0895      		ret
 217               	.Lscope2:
 219               		.stabd	78,0,0
 221               	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 checksum.c
     /tmp/ccBGCp0M.s:2      *ABS*:0000003f __SREG__
     /tmp/ccBGCp0M.s:3      *ABS*:0000003e __SP_H__
     /tmp/ccBGCp0M.s:4      *ABS*:0000003d __SP_L__
     /tmp/ccBGCp0M.s:5      *ABS*:00000034 __CCP__
     /tmp/ccBGCp0M.s:6      *ABS*:00000000 __tmp_reg__
     /tmp/ccBGCp0M.s:7      *ABS*:00000001 __zero_reg__
     /tmp/ccBGCp0M.s:69     .text:00000000 CRC8_Update
     /tmp/ccBGCp0M.s:131    .text:00000022 CRC8_Checksum

NO UNDEFINED SYMBOLS
