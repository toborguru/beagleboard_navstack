#!/bin/bash

# Script written to monitor and control the DATA robot by Sawyer Larkin

NAME=`basename $0`

display_usage() 
{ 
  echo "Usage: $NAME [options]"  1>&2
  echo "" 1>&2
	echo "Commands DATA to do a simple motion test using the I2C interface." 1>&2
  echo "" 1>&2
	echo "If no I2C setup options are specified they will attempt to be set" 1>&2
	echo "by environment variables:" 1>&2
	echo "DATA_BASE_I2C_BUS and DATA_BB_TRAINER_I2C_ADDR" 1>&2
  echo "" 1>&2
  echo "  -a=ADDRESS  I2C board address to be used" 1>&2
  echo "  -b=BUS      I2C bus number to be used" 1>&2
  echo "  -h          Print this message" 1>&2
  echo "  -v          Verbose, print various config parameters" 1>&2
  exit 1
}

INVALID=INVALID
VERBOSE=0

# Assign I2C parameters from environment vars if possible
I2C_BUS=${DATA_BASE_I2C_BUS:-$INVALID}
I2C_BOARD=${DATA_BB_TRAINER_I2C_ADDR:-$INVALID}

while getopts "a:b:hv" opt
do
  case ${opt} in
    a )
      I2C_BOARD=$OPTARG
      ;;
    b )
      I2C_BUS=$OPTARG
      ;;
    h )
      display_usage
      ;;
    v )
      VERBOSE=1
      ;;
    \? )
      echo "Invalid option: $OPTARG" 1>&2
      display_usage
      ;;
    : )
      echo "Invalid option: $OPTARG requires an argument" 1>&2
      display_usage
      ;;
  esac
done
shift $((OPTIND -1))

if ! [[ $I2C_BUS =~ ^[0-9xXaAbBcCdDeEfF]+$ ]]
then
  echo "No valid I2C bus specified!" 1>&2
  echo "I2C Bus Number:    $I2C_BUS" 1>&2
  echo "I2C Board Address: $I2C_BOARD" 1>&2
	display_usage
fi

if ! [[ $I2C_BOARD =~ ^[0-9xXaAbBcCdDeEfF]+$ ]]
then
  echo "No valid I2C board address specified!" 1>&2
  echo "I2C Bus Number:    $I2C_BUS" 1>&2
  echo "I2C Board Address: $I2C_BOARD" 1>&2
	display_usage
fi

if [[ VERBOSE -ne 0 ]]
then
  echo "I2C Bus Number:    $I2C_BUS"
  echo "I2C Board Address: $I2C_BOARD"
  echo
fi

LIN_VEL_REG=2
TIME_COUNT=8

# Time 1
# Works well, straight good - was center sticking
#T1_REG_VAL="0xA0 0xFF 0x00 0x00"

# Not moving at all, no vel listed in telem
#T1_REG_VAL="0x00 0x00 0x00 0x80"

# Moving.... - Some center sticking
T1_REG_VAL="0x00 0x00 0x00 0x60"

#T1_REG_VAL="0x00 0x00 0xB0 0xFF"



# Time 2
# Works well, straight good - was center sticking
#T2_REG_VAL="0x00 0x60 0x00 0x00"

# Causes stop/pause same as 00's but also smoother starts, no jerking.
T2_REG_VAL="0x00 0x00 0xA0 0xFF"

#T2_REG_VAL="0x00 0x00 0x00 0x00"
#T2_REG_VAL="0x00 0x60 0x00 0x40"
#T2_REG_VAL="0x00 0x00 0x00 0x80"



while [ true ]
do
  for ((i=1;i<=$TIME_COUNT;i++))
  do
    # i2cset -y BUS BOARD VEL_REG LinLow LinHigh AngLow AngHigh i
    i2cset -y $I2C_BUS $I2C_BOARD $LIN_VEL_REG $T1_REG_VAL i
    echo "------------------------------------------------------"
    echo -n "System Time:      "
    i2cget -y $I2C_BUS $I2C_BOARD 0xC w
    echo -n "Linear Velocity:  "
    i2cget -y $I2C_BUS $I2C_BOARD 0x2 w
    echo -n "Angular Velocity: "
    i2cget -y $I2C_BUS $I2C_BOARD 0x4 w
#     echo
#     echo -n "Left Encoder:     "
#     i2cget -y 1 0x6 0x5 w
#     echo -n "Right Encoder:    "
#     i2cget -y 1 0x6 0x7 w
#     echo -n "Encoder Time:     "
#     i2cget -y 1 0x6 0x9 w
#     echo
    echo
    sleep 0.5
  done
  
  for ((i=1;i<=$TIME_COUNT;i++))
  do
    # i2cset -y BUS BOARD VEL_REG LinLow LinHigh AngLow AngHigh i
# i2cset -y $I2C_BUS $I2C_BOARD $LIN_VEL_REG 0x00 0x60 0x00 0x40 i
    i2cset -y $I2C_BUS $I2C_BOARD $LIN_VEL_REG $T2_REG_VAL i
    echo "------------------------------------------------------"
    echo -n "System Time:      "
    i2cget -y $I2C_BUS $I2C_BOARD 0xC w
    echo -n "Linear Velocity:  "
    i2cget -y $I2C_BUS $I2C_BOARD 0x2 w
    echo -n "Angular Velocity: "
    i2cget -y $I2C_BUS $I2C_BOARD 0x4 w
    echo
    sleep 0.5
  done
done
