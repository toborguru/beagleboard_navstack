/* Auto-generated by genmsg_cpp for file /home/tobor/data-beagleboard/bb_navigation/diff_drive/msg/EncoderCounts.msg */
#ifndef DIFF_DRIVE_MESSAGE_ENCODERCOUNTS_H
#define DIFF_DRIVE_MESSAGE_ENCODERCOUNTS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace diff_drive
{
template <class ContainerAllocator>
struct EncoderCounts_ {
  typedef EncoderCounts_<ContainerAllocator> Type;

  EncoderCounts_()
  : left_count(0)
  , right_count(0)
  , stasis_count(0)
  , dt_ms(0)
  , reading_time()
  {
  }

  EncoderCounts_(const ContainerAllocator& _alloc)
  : left_count(0)
  , right_count(0)
  , stasis_count(0)
  , dt_ms(0)
  , reading_time()
  {
  }

  typedef int16_t _left_count_type;
  int16_t left_count;

  typedef int16_t _right_count_type;
  int16_t right_count;

  typedef int16_t _stasis_count_type;
  int16_t stasis_count;

  typedef int16_t _dt_ms_type;
  int16_t dt_ms;

  typedef ros::Time _reading_time_type;
  ros::Time reading_time;


private:
  static const char* __s_getDataType_() { return "diff_drive/EncoderCounts"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "ac248d5b02def18e8264fc359c1f407c"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "int16   left_count\n\
int16   right_count\n\
int16   stasis_count\n\
int16   dt_ms\n\
time    reading_time\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, left_count);
    ros::serialization::serialize(stream, right_count);
    ros::serialization::serialize(stream, stasis_count);
    ros::serialization::serialize(stream, dt_ms);
    ros::serialization::serialize(stream, reading_time);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, left_count);
    ros::serialization::deserialize(stream, right_count);
    ros::serialization::deserialize(stream, stasis_count);
    ros::serialization::deserialize(stream, dt_ms);
    ros::serialization::deserialize(stream, reading_time);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(left_count);
    size += ros::serialization::serializationLength(right_count);
    size += ros::serialization::serializationLength(stasis_count);
    size += ros::serialization::serializationLength(dt_ms);
    size += ros::serialization::serializationLength(reading_time);
    return size;
  }

  typedef boost::shared_ptr< ::diff_drive::EncoderCounts_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::diff_drive::EncoderCounts_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct EncoderCounts
typedef  ::diff_drive::EncoderCounts_<std::allocator<void> > EncoderCounts;

typedef boost::shared_ptr< ::diff_drive::EncoderCounts> EncoderCountsPtr;
typedef boost::shared_ptr< ::diff_drive::EncoderCounts const> EncoderCountsConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::diff_drive::EncoderCounts_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::diff_drive::EncoderCounts_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace diff_drive

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::diff_drive::EncoderCounts_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::diff_drive::EncoderCounts_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::diff_drive::EncoderCounts_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ac248d5b02def18e8264fc359c1f407c";
  }

  static const char* value(const  ::diff_drive::EncoderCounts_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xac248d5b02def18eULL;
  static const uint64_t static_value2 = 0x8264fc359c1f407cULL;
};

template<class ContainerAllocator>
struct DataType< ::diff_drive::EncoderCounts_<ContainerAllocator> > {
  static const char* value() 
  {
    return "diff_drive/EncoderCounts";
  }

  static const char* value(const  ::diff_drive::EncoderCounts_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::diff_drive::EncoderCounts_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int16   left_count\n\
int16   right_count\n\
int16   stasis_count\n\
int16   dt_ms\n\
time    reading_time\n\
\n\
";
  }

  static const char* value(const  ::diff_drive::EncoderCounts_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::diff_drive::EncoderCounts_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::diff_drive::EncoderCounts_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.left_count);
    stream.next(m.right_count);
    stream.next(m.stasis_count);
    stream.next(m.dt_ms);
    stream.next(m.reading_time);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct EncoderCounts_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::diff_drive::EncoderCounts_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::diff_drive::EncoderCounts_<ContainerAllocator> & v) 
  {
    s << indent << "left_count: ";
    Printer<int16_t>::stream(s, indent + "  ", v.left_count);
    s << indent << "right_count: ";
    Printer<int16_t>::stream(s, indent + "  ", v.right_count);
    s << indent << "stasis_count: ";
    Printer<int16_t>::stream(s, indent + "  ", v.stasis_count);
    s << indent << "dt_ms: ";
    Printer<int16_t>::stream(s, indent + "  ", v.dt_ms);
    s << indent << "reading_time: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.reading_time);
  }
};


} // namespace message_operations
} // namespace ros

#endif // DIFF_DRIVE_MESSAGE_ENCODERCOUNTS_H

